                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x03c: 720602000000000000   | 	jl Init
                            | 
0x045:                      | Loop:	
0x045: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
                            | 	
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9 
                            | 	
0x059: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
                            | 
0x063: 50e71800000000000000 | 	mrmovq 24(%rdi), %r14 
                            | 
0x06d: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
                            | 
0x077: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
                            | 
0x081: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11
                            | 
0x08b: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
                            | 	
0x095: 50374000000000000000 | 	mrmovq 64(%rdi), %rbx
                            | 
0x09f: 50574800000000000000 | 	mrmovq 72(%rdi), %rbp
                            | 
0x0a9: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 
0x0b3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0b5: 71c800000000000000   | 	jle Next1		# if so, goto Npos:
                            | 	
0x0be: c0f00100000000000000 | 	iaddq $1, %rax
0x0c8:                      | Next1:
0x0c8: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0ca: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0d4: 71e700000000000000   | 	jle Next2		# if so, goto Npos:
                            | 	
0x0dd: c0f00100000000000000 | 	iaddq $1, %rax
0x0e7:                      | Next2:
0x0e7: 6288                 | 	andq %r8, %r8	# val <= 0?
0x0e9: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x0f3: 710601000000000000   | 	jle Next3		# if so, goto Npos:
                            | 	
0x0fc: c0f00100000000000000 | 	iaddq $1, %rax
0x106:                      | Next3:
0x106: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x108: 40e61800000000000000 | 	rmmovq %r14, 24(%rsi) 
0x112: 712501000000000000   | 	jle Next4	# if so, goto Npos:
                            | 	
0x11b: c0f00100000000000000 | 	iaddq $1, %rax
0x125:                      | Next4:
0x125: 62cc                 | 	andq %r12, %r12	# val <= 0?
0x127: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi) 
0x131: 714401000000000000   | 	jle Next5	# if so, goto Npos:
                            | 	
0x13a: c0f00100000000000000 | 	iaddq $1, %rax
0x144:                      | Next5:
0x144: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x146: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi) 
0x150: 716301000000000000   | 	jle Next6	# if so, goto Npos:
                            | 	
0x159: c0f00100000000000000 | 	iaddq $1, %rax
0x163:                      | Next6:
0x163: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x165: 40b63000000000000000 | 	rmmovq %r11, 48(%rsi) 
0x16f: 718201000000000000   | 	jle Next7	# if so, goto Npos:
                            | 	
0x178: c0f00100000000000000 | 	iaddq $1, %rax
0x182:                      | Next7:
0x182: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x184: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi) 
0x18e: 71a101000000000000   | 	jle Next8	# if so, goto Npos:
                            | 	
0x197: c0f00100000000000000 | 	iaddq $1, %rax
0x1a1:                      | Next8:
0x1a1: 6233                 | 	andq %rbx, %rbx		# val <= 0?
0x1a3: 40364000000000000000 | 	rmmovq %rbx, 64(%rsi) 
0x1ad: 71c001000000000000   | 	jle Next9	# if so, goto Npos:
                            | 	
0x1b6: c0f00100000000000000 | 	iaddq $1, %rax
0x1c0:                      | Next9:
0x1c0: 6255                 | 	andq %rbp, %rbp		# val <= 0?
0x1c2: 40564800000000000000 | 	rmmovq %rbp, 72(%rsi) 
0x1cc: 71df01000000000000   | 	jle Npos	# if so, goto Npos:
                            | 	
0x1d5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1df:                      | Npos:	
0x1df: c0f75000000000000000 | 	iaddq $80, %rdi
0x1e9: c0f65000000000000000 | 	iaddq $80, %rsi
0x1f3: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx
0x1fd: 754500000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x206:                      | Init:	
0x206: c0f20a00000000000000 | 	iaddq $10, %rdx
0x210: 761a02000000000000   | 	jg Nine
0x219: 90                   | 	ret 
                            | 
0x21a:                      | Nine:
0x21a: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x224: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x22e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x238: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x23a: 714d02000000000000   | 	jle NineJudge		# if so, goto Npos:
0x243: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x24d:                      | NineJudge:
0x24d: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x257: 766102000000000000   | 	jg Eight 
0x260: 90                   | 	ret
                            | 
0x261:                      | Eight:	
0x261: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x26b: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x275: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x277: 718a02000000000000   | 	jle EightJudge		# if so, goto Npos:
0x280: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x28a:                      | EightJudge:
0x28a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x294: 769e02000000000000   | 	jg Seven
0x29d: 90                   | 	ret 
                            | 
0x29e:                      | Seven:
0x29e: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x2a8: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x2b2: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2b4: 71c702000000000000   | 	jle SevenJudge		# if so, goto Npos:
0x2bd: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2c7:                      | SevenJudge:
0x2c7: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2d1: 76db02000000000000   | 	jg Six 
0x2da: 90                   | 	ret
                            | 
0x2db:                      | Six:	
0x2db: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x2e5: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x2ef: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2f1: 710403000000000000   | 	jle SixJudge		# if so, goto Npos:
0x2fa: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x304:                      | SixJudge:
0x304: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x30e: 761803000000000000   | 	jg Five 
0x317: 90                   | 	ret 
                            | 
0x318:                      | Five:	
0x318: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x322: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x32c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x32e: 714103000000000000   | 	jle FiveJudge		# if so, goto Npos:
0x337: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x341:                      | FiveJudge:
0x341: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x34b: 765503000000000000   | 	jg Four 
0x354: 90                   | 	ret 
                            | 
0x355:                      | Four:	
0x355: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x35f: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
0x369: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x36b: 717e03000000000000   | 	jle FourJudge		# if so, goto Npos:
0x374: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x37e:                      | FourJudge:
0x37e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x388: 769203000000000000   | 	jg Three
0x391: 90                   | 	ret
                            | 
0x392:                      | Three:	
0x392: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11	# read val from src...
0x39c: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x3a6: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x3a8: 71bb03000000000000   | 	jle ThreeJudge		# if so, goto Npos:
0x3b1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3bb:                      | ThreeJudge:
0x3bb: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x3c5: 76cf03000000000000   | 	jg Two
0x3ce: 90                   | 	ret
                            | 
0x3cf:                      | Two:	
0x3cf: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10	# read val from src...
0x3d9: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x3e3: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x3e5: 71f803000000000000   | 	jle TwoJudge		# if so, goto Npos:
0x3ee: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3f8:                      | TwoJudge:
0x3f8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x402: 760c04000000000000   | 	jg One
0x40b: 90                   | 	ret
                            | 
0x40c:                      | One:	
0x40c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x40e: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)	# ...and store it to dst
0x418: 712b04000000000000   | 	jle Done		# if so, goto Npos:
0x421: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x42b:                      | Done:
0x42b: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x42c:                      | End:
                            | #/* $end ncopy-ys */
0x42c:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x430:                      | 	.align 8
0x430:                      | src:
0x430: ffffffffffffffff     | 	.quad -1
0x438: 0200000000000000     | 	.quad 2
0x440: 0300000000000000     | 	.quad 3
0x448: fcffffffffffffff     | 	.quad -4
0x450: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x460:                      | 	.align 16
0x460:                      | Predest:
0x460: fadebc0000000000     | 	.quad 0xbcdefa
0x468:                      | dest:
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488:                      | Postdest:
0x488: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x490:                      | .align 8
                            | # Run time stack
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
                            | 
0x510:                      | Stack:
