#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:

	#irmovq $32, %r13
	irmovq $8, %r12
	irmovq $1, %r11
	#subq %r13, %rsi

Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	
	mrmovq 8(%rdi), %r9 
	
	mrmovq 16(%rdi), %r8

	mrmovq 24(%rdi), %r14 

	mrmovq 32(%rdi), %r13

	mrmovq 40(%rdi), %r12

	iaddq $40, %rdi

	rmmovq %r10, (%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Next1		# if so, goto Npos:
	
	iaddq $1, %rax
	#addq %r11, %rax		# count++
Next1:
	#iaddq $(-1), %rdx
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
	jle Next2		# if so, goto Npos:
	
	iaddq $1, %rax
#	addq %r11, %rax		# count++
Next2:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8	# val <= 0?
	jle Next3		# if so, goto Npos:
	
	iaddq $1, %rax
#	addq %r11, %rax		# count++
Next3:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r14, 24(%rsi) 
	andq %r14, %r14		# val <= 0?
	jle Next4	# if so, goto Npos:
	
	iaddq $1, %rax
	#addq %r11, %rax		# count++
Next4:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r13, 32(%rsi) 
	andq %r13, %r13		# val <= 0?
	jle Next5		# if so, goto Npos:

	iaddq $1, %rax
	#addq %r11, %rax		# count++
Next5:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r12, 40(%rsi) 
	andq %r12, %r12		# val <= 0?
	jle Again		# if so, goto Npos:

	iaddq $1, %rax
	#addq %r11, %rax		# count++

Again:
	mrmovq (%rdi), %r10	# read val from src...
	
	mrmovq 8(%rdi), %r9 
	
	mrmovq 16(%rdi), %r8

	mrmovq 24(%rdi), %r14 

	mrmovq 32(%rdi), %r13

	mrmovq 40(%rdi), %r12

	iaddq $40, %rdi

	rmmovq %r10, (%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Next6		# if so, goto Npos:
	
	iaddq $1, %rax
	#addq %r11, %rax		# count++
Next6:
	#iaddq $(-1), %rdx
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	rmmovq %r9, 8(%rsi)
	andq %r9, %r9		# val <= 0?
	jle Next7		# if so, goto Npos:
	
	iaddq $1, %rax
#	addq %r11, %rax		# count++
Next7:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r8, 16(%rsi)
	andq %r8, %r8	# val <= 0?
	jle Next8		# if so, goto Npos:
	
	iaddq $1, %rax
#	addq %r11, %rax		# count++
Next8:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r14, 24(%rsi) 
	andq %r14, %r14		# val <= 0?
	jle Next9	# if so, goto Npos:
	
	iaddq $1, %rax
	#addq %r11, %rax		# count++
Next9:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r13, 32(%rsi) 
	andq %r13, %r13		# val <= 0?
	jle Next10		# if so, goto Npos:

	iaddq $1, %rax
	#addq %r11, %rax		# count++
Next10:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	#iaddq $8, %rsi 
	rmmovq %r12, 40(%rsi) 
	andq %r12, %r12		# val <= 0?
	jle Npos		# if so, goto Npos:

	iaddq $1, %rax
	#addq %r11, %rax		# count++

Npos:	
	andq %rdx,%rdx		# len > 0?
	iaddq $80, %rsi
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
