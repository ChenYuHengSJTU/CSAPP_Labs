#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:

	irmovq $1, %r11
	irmovq $8, %r12
	#irmovq $0, %r13 
Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	
	iaddq $8, %rdi 
	mrmovq (%rdi), %r9 
	
	iaddq $8, %rdi 
	mrmovq (%rdi), %r8

	iaddq $8, %rdi 
	mrmovq (%rdi), %r14 

	iaddq $8, %rdi 
	mrmovq (%rdi), %r13

	rmmovq %r10, (%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Next1		# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next1:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r9, (%rsi)
	andq %r9, %r9		# val <= 0?
	jle Next2		# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next2:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r8, (%rsi)
	andq %r8, %r8	# val <= 0?
	jle Next3		# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next3:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r14, (%rsi) 
	andq %r14, %r14		# val <= 0?
	jle Next4	# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next4:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r13, (%rsi) 
	andq %r13, %r13		# val <= 0?
	jle Second		# if so, goto Npos:

	addq %r11, %rax		# count++

Second:
	iaddq $8, %rdi
	mrmovq (%rdi), %r10	# read val from src...
	
	iaddq $8, %rdi 
	mrmovq (%rdi), %r9 
	
	iaddq $8, %rdi 
	mrmovq (%rdi), %r8

	iaddq $8, %rdi 
	mrmovq (%rdi), %r14 

	iaddq $8, %rdi 
	mrmovq (%rdi), %r13

	rmmovq %r10, (%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Next5		# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next5:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r9, (%rsi)
	andq %r9, %r9		# val <= 0?
	jle Next6		# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next6:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r8, (%rsi)
	andq %r8, %r8	# val <= 0?
	jle Next7		# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next7:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r14, (%rsi) 
	andq %r14, %r14		# val <= 0?
	jle Next8	# if so, goto Npos:
	
	addq %r11, %rax		# count++
Next8:
	subq %r11, %rdx
	andq %rdx, %rdx 
	jle Done
	iaddq $8, %rsi 
	rmmovq %r13, (%rsi) 
	andq %r13, %r13		# val <= 0?
	jle Npos		# if so, goto Npos:
	
	addq %r11, %rax		# count++

Npos:	
	andq %rdx,%rdx		# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
