#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddq $-10, %rdx
	jle Rem

Loop:	
	mrmovq (%rdi), %r10	# read val from src...
	
	mrmovq 8(%rdi), %r9 
	
	mrmovq 16(%rdi), %r8

	mrmovq 24(%rdi), %r14 

	mrmovq 32(%rdi), %r12

	mrmovq 40(%rdi), %r13

	mrmovq 48(%rdi), %r11

	mrmovq 56(%rdi), %rcx

	mrmovq 64(%rdi), %rbx

	mrmovq 72(%rdi), %rbp

	rmmovq %r10, (%rsi)	# ...and store it to dst

	andq %r10, %r10		# val <= 0?
	jle Next1		# if so, goto Npos:
	
	iaddq $1, %rax
Next1:
	andq %r9, %r9		# val <= 0?
	rmmovq %r9, 8(%rsi)
	jle Next2		# if so, goto Npos:
	
	iaddq $1, %rax
Next2:
	andq %r8, %r8	# val <= 0?
	rmmovq %r8, 16(%rsi)
	jle Next3		# if so, goto Npos:
	
	iaddq $1, %rax
Next3:
	andq %r14, %r14		# val <= 0?
	rmmovq %r14, 24(%rsi) 
	jle Next4	# if so, goto Npos:
	
	iaddq $1, %rax
Next4:
	andq %r12, %r12	# val <= 0?
	rmmovq %r12, 32(%rsi) 
	jle Next5	# if so, goto Npos:
	
	iaddq $1, %rax
Next5:
	andq %r13, %r13		# val <= 0?
	rmmovq %r13, 40(%rsi) 
	jle Next6	# if so, goto Npos:
	
	iaddq $1, %rax
Next6:
	andq %r11, %r11		# val <= 0?
	rmmovq %r11, 48(%rsi) 
	jle Next7	# if so, goto Npos:
	
	iaddq $1, %rax
Next7:
	andq %rcx, %rcx		# val <= 0?
	rmmovq %rcx, 56(%rsi) 
	jle Next8	# if so, goto Npos:
	
	iaddq $1, %rax
Next8:
	andq %rbx, %rbx		# val <= 0?
	rmmovq %rbx, 64(%rsi) 
	jle Next9	# if so, goto Npos:
	
	iaddq $1, %rax
Next9:
	andq %rbp, %rbp	# val <= 0?
	rmmovq %rbp, 72(%rsi) 
	jle Npos	# if so, goto Npos:
	
	iaddq $1, %rax
Npos:	
	iaddq $80, %rdi
	iaddq $80, %rsi
	iaddq $-10, %rdx
	jg Loop			# if so, goto Loop:

Rem:
	mrmovq (%rdi), %r8
	iaddq $7, %rdx
	jge RGE3
R02:
	iaddq $2, %rdx
	jl Done
	rmmovq %r8, (%rsi)
	je R1
	jmp R2

R46:
	iaddq $2, %rdx
	jl R4
	je R5
	jmp R6

RGE3:
	rmmovq %r8, (%rsi)
	je R3

R49:	
	iaddq $-4, %rdx
	jl R46
	je R7

R89:
	iaddq $-1, %rdx
	je R8

R9:
	andq %r8, %r8
	mrmovq 64(%rdi), %r8
	jle R9NP
	iaddq $1, %rax
	R9NP:
	rmmovq %r8, 64(%rsi)
R8:
	andq %r8, %r8
	mrmovq 56(%rdi), %r8
	jle R8NP
	iaddq $1, %rax
	R8NP:
	rmmovq %r8, 56(%rsi)
R7:
	andq %r8, %r8
	mrmovq 48(%rdi), %r8
	jle R7NP
	iaddq $1, %rax
	R7NP:
	rmmovq %r8, 48(%rsi)
R6:
	andq %r8, %r8
	mrmovq 40(%rdi), %r8
	jle R6NP
	iaddq $1, %rax
	R6NP:
	rmmovq %r8, 40(%rsi)
R5:
	andq %r8, %r8
	mrmovq 32(%rdi), %r8
	jle R5NP
	iaddq $1, %rax
	R5NP:
	rmmovq %r8, 32(%rsi)
R4:
	andq %r8, %r8
	mrmovq 24(%rdi), %r8
	jle R4NP
	iaddq $1, %rax
	R4NP:
	rmmovq %r8, 24(%rsi)
R3:
	andq %r8, %r8
	mrmovq 16(%rdi), %r8
	jle R3NP
	iaddq $1, %rax
	R3NP:
	rmmovq %r8, 16(%rsi)
R2:
	andq %r8, %r8
	mrmovq 8(%rdi), %r8
	jle R2NP
	iaddq $1, %rax
	R2NP:
	rmmovq %r8, 8(%rsi)
R1:
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
