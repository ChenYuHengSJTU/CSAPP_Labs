                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47009000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f6e806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 806903000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x045: 72bd01000000000000   | 	jl Init
                            | 
0x04e:                      | Loop:	
0x04e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
                            | 	
0x058: 50970800000000000000 | 	mrmovq 8(%rdi), %r9 
                            | 	
0x062: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
                            | 
0x06c: 50e71800000000000000 | 	mrmovq 24(%rdi), %r14 
                            | 
0x076: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
                            | 
0x080: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
                            | 
0x08a: 50b73000000000000000 | 	mrmovq 48(%rdi), %r11
                            | 
0x094: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
                            | 
0x09e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 
0x0a8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0aa: 71bd00000000000000   | 	jle Next1		# if so, goto Npos:
                            | 	
0x0b3: c0f00100000000000000 | 	iaddq $1, %rax
0x0bd:                      | Next1:
0x0bd: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0bf: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0c9: 71dc00000000000000   | 	jle Next2		# if so, goto Npos:
                            | 	
0x0d2: c0f00100000000000000 | 	iaddq $1, %rax
0x0dc:                      | Next2:
0x0dc: 6288                 | 	andq %r8, %r8	# val <= 0?
0x0de: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x0e8: 71fb00000000000000   | 	jle Next3		# if so, goto Npos:
                            | 	
0x0f1: c0f00100000000000000 | 	iaddq $1, %rax
0x0fb:                      | Next3:
0x0fb: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x0fd: 40e61800000000000000 | 	rmmovq %r14, 24(%rsi) 
0x107: 711a01000000000000   | 	jle Next4	# if so, goto Npos:
                            | 	
0x110: c0f00100000000000000 | 	iaddq $1, %rax
0x11a:                      | Next4:
0x11a: 62cc                 | 	andq %r12, %r12	# val <= 0?
0x11c: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi) 
0x126: 713901000000000000   | 	jle Next5	# if so, goto Npos:
                            | 	
0x12f: c0f00100000000000000 | 	iaddq $1, %rax
0x139:                      | Next5:
0x139: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x13b: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi) 
0x145: 715801000000000000   | 	jle Next6	# if so, goto Npos:
                            | 	
0x14e: c0f00100000000000000 | 	iaddq $1, %rax
0x158:                      | Next6:
0x158: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x15a: 40b63000000000000000 | 	rmmovq %r11, 48(%rsi) 
0x164: 717701000000000000   | 	jle Next7	# if so, goto Npos:
                            | 	
0x16d: c0f00100000000000000 | 	iaddq $1, %rax
0x177:                      | Next7:
0x177: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x179: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi) 
0x183: 719601000000000000   | 	jle Npos	# if so, goto Npos:
                            | 	
0x18c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x196:                      | Npos:	
0x196: c0f74000000000000000 | 	iaddq $64, %rdi
0x1a0: c0f64000000000000000 | 	iaddq $64, %rsi
0x1aa: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1b4: 754e00000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x1bd:                      | Init:	
0x1bd: c0f20800000000000000 | 	iaddq $8, %rdx
0x1c7: 76d101000000000000   | 	jg Seven
0x1d0: 90                   | 	ret 
                            | 
0x1d1:                      | Seven:
0x1d1: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x1db: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x1e5: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x1ef: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1f1: 710402000000000000   | 	jle SevenJudge		# if so, goto Npos:
0x1fa: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x204:                      | SevenJudge:
0x204: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x20e: 761802000000000000   | 	jg Six 
0x217: 90                   | 	ret
                            | 
0x218:                      | Six:	
0x218: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x222: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x22c: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x22e: 714102000000000000   | 	jle SixJudge		# if so, goto Npos:
0x237: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x241:                      | SixJudge:
0x241: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x24b: 765502000000000000   | 	jg Five 
0x254: 90                   | 	ret 
                            | 
0x255:                      | Five:	
0x255: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x25f: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x269: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x26b: 717e02000000000000   | 	jle FiveJudge		# if so, goto Npos:
0x274: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x27e:                      | FiveJudge:
0x27e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x288: 769202000000000000   | 	jg Four 
0x291: 90                   | 	ret 
                            | 
0x292:                      | Four:	
0x292: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x29c: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x2a6: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x2a8: 71bb02000000000000   | 	jle FourJudge		# if so, goto Npos:
0x2b1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2bb:                      | FourJudge:
0x2bb: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2c5: 76cf02000000000000   | 	jg Three
0x2ce: 90                   | 	ret
                            | 
0x2cf:                      | Three:	
0x2cf: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11	# read val from src...
0x2d9: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x2e3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2e5: 71f802000000000000   | 	jle ThreeJudge		# if so, goto Npos:
0x2ee: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2f8:                      | ThreeJudge:
0x2f8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x302: 760c03000000000000   | 	jg Two
0x30b: 90                   | 	ret
                            | 
0x30c:                      | Two:	
0x30c: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val from src...
0x316: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
0x320: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x322: 713503000000000000   | 	jle TwoJudge		# if so, goto Npos:
0x32b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x335:                      | TwoJudge:
0x335: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x33f: 764903000000000000   | 	jg One
0x348: 90                   | 	ret
                            | 
0x349:                      | One:	
0x349: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x34b: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x355: 716803000000000000   | 	jle Done		# if so, goto Npos:
0x35e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x368:                      | Done:
0x368: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x369:                      | End:
                            | #/* $end ncopy-ys */
0x369:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 37.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x369:                      | check:
                            | 	# Return value test
0x369: 30fa2500000000000000 | 	irmovq $37,%r10
0x373: 61a0                 | 	subq %r10,%rax
0x375: 739103000000000000   | 	je checkb
0x37e: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x388: 70cf04000000000000   | 	jmp cdone
0x391:                      | checkb:
                            | 	# Code length check
0x391: 30f06903000000000000 | 	irmovq EndFun,%rax
0x39b: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3a5: 6120                 | 	subq %rdx,%rax
0x3a7: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3b1: 6102                 | 	subq %rax,%rdx
0x3b3: 75cf03000000000000   | 	jge checkm
0x3bc: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3c6: 70cf04000000000000   | 	jmp cdone
0x3cf:                      | checkm:
0x3cf: 30f2e806000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3d9: 30f3d004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3e3: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x3ed: 6277                 | 	andq %rdi,%rdi
0x3ef: 734d04000000000000   | 	je checkpre         # Skip check if count = 0
0x3f8:                      | mcloop:
0x3f8: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x402: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x40c: 6160                 | 	subq %rsi,%rax
0x40e: 732a04000000000000   | 	je  mok
0x417: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x421: 70cf04000000000000   | 	jmp cdone
0x42a:                      | mok:
0x42a: 30f00800000000000000 | 	irmovq $8,%rax
0x434: 6002                 | 	addq %rax,%rdx	  # dest ++
0x436: 6003                 | 	addq %rax,%rbx    # src++
0x438: 30f00100000000000000 | 	irmovq $1,%rax
0x442: 6107                 | 	subq %rax,%rdi    # cnt--
0x444: 76f803000000000000   | 	jg mcloop
0x44d:                      | checkpre:
                            | 	# Check for corruption
0x44d: 30f2e006000000000000 | 	irmovq Predest,%rdx
0x457: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x461: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x46b: 6120                 | 	subq %rdx,%rax
0x46d: 738904000000000000   | 	je checkpost
0x476: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x480: 70cf04000000000000   | 	jmp cdone
0x489:                      | checkpost:
                            | 	# Check for corruption
0x489: 30f2e808000000000000 | 	irmovq Postdest,%rdx
0x493: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x49d: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4a7: 6120                 | 	subq %rdx,%rax
0x4a9: 73c504000000000000   | 	je checkok
0x4b2: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4bc: 70cf04000000000000   | 	jmp cdone
0x4c5:                      | checkok:
                            | 	# Successful checks
0x4c5: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4cf:                      | cdone:
0x4cf: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4d0:                      | 	.align 8
0x4d0:                      | src:
0x4d0: 0100000000000000     | 	.quad 1
0x4d8: 0200000000000000     | 	.quad 2
0x4e0: 0300000000000000     | 	.quad 3
0x4e8: 0400000000000000     | 	.quad 4
0x4f0: 0500000000000000     | 	.quad 5
0x4f8: 0600000000000000     | 	.quad 6
0x500: 0700000000000000     | 	.quad 7
0x508: f8ffffffffffffff     | 	.quad -8
0x510: 0900000000000000     | 	.quad 9
0x518: 0a00000000000000     | 	.quad 10
0x520: 0b00000000000000     | 	.quad 11
0x528: f4ffffffffffffff     | 	.quad -12
0x530: 0d00000000000000     | 	.quad 13
0x538: 0e00000000000000     | 	.quad 14
0x540: f1ffffffffffffff     | 	.quad -15
0x548: 1000000000000000     | 	.quad 16
0x550: efffffffffffffff     | 	.quad -17
0x558: 1200000000000000     | 	.quad 18
0x560: 1300000000000000     | 	.quad 19
0x568: ecffffffffffffff     | 	.quad -20
0x570: 1500000000000000     | 	.quad 21
0x578: eaffffffffffffff     | 	.quad -22
0x580: e9ffffffffffffff     | 	.quad -23
0x588: 1800000000000000     | 	.quad 24
0x590: 1900000000000000     | 	.quad 25
0x598: 1a00000000000000     | 	.quad 26
0x5a0: 1b00000000000000     | 	.quad 27
0x5a8: 1c00000000000000     | 	.quad 28
0x5b0: 1d00000000000000     | 	.quad 29
0x5b8: 1e00000000000000     | 	.quad 30
0x5c0: 1f00000000000000     | 	.quad 31
0x5c8: 2000000000000000     | 	.quad 32
0x5d0: 2100000000000000     | 	.quad 33
0x5d8: deffffffffffffff     | 	.quad -34
0x5e0: ddffffffffffffff     | 	.quad -35
0x5e8: dcffffffffffffff     | 	.quad -36
0x5f0: 2500000000000000     | 	.quad 37
0x5f8: daffffffffffffff     | 	.quad -38
0x600: d9ffffffffffffff     | 	.quad -39
0x608: d8ffffffffffffff     | 	.quad -40
0x610: 2900000000000000     | 	.quad 41
0x618: 2a00000000000000     | 	.quad 42
0x620: d5ffffffffffffff     | 	.quad -43
0x628: d4ffffffffffffff     | 	.quad -44
0x630: 2d00000000000000     | 	.quad 45
0x638: 2e00000000000000     | 	.quad 46
0x640: 2f00000000000000     | 	.quad 47
0x648: d0ffffffffffffff     | 	.quad -48
0x650: cfffffffffffffff     | 	.quad -49
0x658: ceffffffffffffff     | 	.quad -50
0x660: cdffffffffffffff     | 	.quad -51
0x668: 3400000000000000     | 	.quad 52
0x670: cbffffffffffffff     | 	.quad -53
0x678: caffffffffffffff     | 	.quad -54
0x680: 3700000000000000     | 	.quad 55
0x688: 3800000000000000     | 	.quad 56
0x690: c7ffffffffffffff     | 	.quad -57
0x698: c6ffffffffffffff     | 	.quad -58
0x6a0: 3b00000000000000     | 	.quad 59
0x6a8: c4ffffffffffffff     | 	.quad -60
0x6b0: c3ffffffffffffff     | 	.quad -61
0x6b8: c2ffffffffffffff     | 	.quad -62
0x6c0: c1ffffffffffffff     | 	.quad -63
0x6c8: 4000000000000000     | 	.quad 64
0x6d0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x6e0:                      | 	.align 16
0x6e0:                      | Predest:
0x6e0: fadebc0000000000     | 	.quad 0xbcdefa
0x6e8:                      | dest:
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810: abefcd0000000000     | 	.quad 0xcdefab
0x818: abefcd0000000000     | 	.quad 0xcdefab
0x820: abefcd0000000000     | 	.quad 0xcdefab
0x828: abefcd0000000000     | 	.quad 0xcdefab
0x830: abefcd0000000000     | 	.quad 0xcdefab
0x838: abefcd0000000000     | 	.quad 0xcdefab
0x840: abefcd0000000000     | 	.quad 0xcdefab
0x848: abefcd0000000000     | 	.quad 0xcdefab
0x850: abefcd0000000000     | 	.quad 0xcdefab
0x858: abefcd0000000000     | 	.quad 0xcdefab
0x860: abefcd0000000000     | 	.quad 0xcdefab
0x868: abefcd0000000000     | 	.quad 0xcdefab
0x870: abefcd0000000000     | 	.quad 0xcdefab
0x878: abefcd0000000000     | 	.quad 0xcdefab
0x880: abefcd0000000000     | 	.quad 0xcdefab
0x888: abefcd0000000000     | 	.quad 0xcdefab
0x890: abefcd0000000000     | 	.quad 0xcdefab
0x898: abefcd0000000000     | 	.quad 0xcdefab
0x8a0: abefcd0000000000     | 	.quad 0xcdefab
0x8a8: abefcd0000000000     | 	.quad 0xcdefab
0x8b0: abefcd0000000000     | 	.quad 0xcdefab
0x8b8: abefcd0000000000     | 	.quad 0xcdefab
0x8c0: abefcd0000000000     | 	.quad 0xcdefab
0x8c8: abefcd0000000000     | 	.quad 0xcdefab
0x8d0: abefcd0000000000     | 	.quad 0xcdefab
0x8d8: abefcd0000000000     | 	.quad 0xcdefab
0x8e0: abefcd0000000000     | 	.quad 0xcdefab
0x8e8:                      | Postdest:
0x8e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x8f0:                      | .align 8
                            | # Run time stack
0x8f0: 0000000000000000     | 	.quad 0
0x8f8: 0000000000000000     | 	.quad 0
0x900: 0000000000000000     | 	.quad 0
0x908: 0000000000000000     | 	.quad 0
0x910: 0000000000000000     | 	.quad 0
0x918: 0000000000000000     | 	.quad 0
0x920: 0000000000000000     | 	.quad 0
0x928: 0000000000000000     | 	.quad 0
0x930: 0000000000000000     | 	.quad 0
0x938: 0000000000000000     | 	.quad 0
0x940: 0000000000000000     | 	.quad 0
0x948: 0000000000000000     | 	.quad 0
0x950: 0000000000000000     | 	.quad 0
0x958: 0000000000000000     | 	.quad 0
0x960: 0000000000000000     | 	.quad 0
0x968: 0000000000000000     | 	.quad 0
                            | 
0x970:                      | Stack:
